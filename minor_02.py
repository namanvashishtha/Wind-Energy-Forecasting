# -*- coding: utf-8 -*-
"""Minor 02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TVddJ4RGfEeIeT6AT1GPixifLoqMVRfi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import ExtraTreesClassifier

df  = pd.read_csv('Turbine_Data.csv')

new_data = df['Date_time'].str.split(' ',n = 1, expand = True)
first_column = new_data[0]
df.insert(0,'Date',first_column)
second_column = new_data[1].str.slice(0,-6)
df.insert(1,'Time',second_column)
df.drop(['Date_time'], axis =1 ,inplace = True)

start_date = '2019-01-01'
end_date = '2019-02-02'
mask = (df['Date'] >= start_date) & (df['Date'] <= end_date)
df = df.loc[mask]
df = df[~df['ActivePower'].isna()]

df.head()

plt.scatter(df['ActivePower'],df['WindSpeed']),

plt.scatter(df['ActivePower'],df['WindDirection'])

plt.scatter(df['ActivePower'],df['GearboxOilTemperature'])

plt.scatter(df['ActivePower'],df['AmbientTemperatue'])

plt.scatter(df['ActivePower'],df['ReactivePower'])

plt.scatter(df['ActivePower'],df['RotorRPM'])

plt.scatter(df['ActivePower'],df['HubTemperature'])

plt.scatter(df['ActivePower'],df['GeneratorRPM'])

plt.scatter(df['ActivePower'],df['MainBoxTemperature'])



new_df = df.drop(['Date', 'Time'], axis=1)
new_df

new_df = new_df.replace(np.nan, 0)

x = new_df[new_df.columns[1:12]]
y = new_df['ActivePower']
y

corrmat = new_df.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(12,12))
g=sns.heatmap(new_df[top_corr_features].corr(),annot=True)

train_data = new_df.reset_index().drop(['index','AmbientTemperatue','GearboxOilTemperature','HubTemperature','MainBoxTemperature','WindDirection'], axis = 1)
train_data

# scaler = StandardScaler()
# scaler.fit(train_data.drop(['ActivePower'], axis = 1))

# scaled_feature = scaler.transform()
# scaled_data = pd.DataFrame(scaled_feature,columns = train_data.columns[1:])
# scaled_data.head()

sns.pairplot(train_data[['ActivePower','GeneratorRPM','ReactivePower','WindSpeed','RotorRPM','GeneratorWinding1Temperature' ]])



X = train_data.iloc[:, 1:7].reset_index().drop('index', axis = 1)     #Independent Variables
# X_test = train_data.iloc[:, 1:7].reset_index().drop('index', axis = 1)

Y = train_data['ActivePower']
# Y_test = train_data['ActivePower']    # Dependent

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, Y_test = train_test_split(X,Y,test_size=0.3)

X_test = X_test.reset_index().drop('index', axis = 1)
Y_test = Y_test.reset_index().drop('index', axis = 1)

"""**Linear Regression**"""

from sklearn.linear_model import LinearRegression
lr_elect = LinearRegression()
lr_elect.fit(X_train,y_train)

y_lr = lr_elect.predict(X_test)

# print ("The test score R2: ", lr_elect.score(X_test, Y_test))

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error as mae
from sklearn.metrics import mean_squared_error

r2 = r2_score(Y_test, y_lr)
print ("The test score R2: ", r2)


error = mae(Y_test, y_lr)
print ("The test score MAE: ", error)


rmse = np.sqrt(mean_squared_error(Y_test, y_lr))
print ("The test score RMSE: ", rmse)

fig = plt.figure(figsize=(15,7))
plt.plot(X_test.index, Y_test, label='Observed', color='b')
plt.plot(X_test.index, y_lr, label='Predicted', color='r')
plt.legend(loc='upper right')



X_test



"""**XG Boost**"""

from xgboost.sklearn import XGBRegressor
xgbRegressor = XGBRegressor()
xgbRegressor.fit(X_train,y_train)

yhat = xgbRegressor.predict(X_test)

# print ("The test score R2: ", xgbRegressor.score(X_test, Y_test))

r2 = r2_score(Y_test, yhat)
print ("The test score R2: ", r2)


error = mae(Y_test, yhat)
print ("The test score MAE: ", error)


rmse = np.sqrt(mean_squared_error(Y_test, yhat))
print ("The test score RMSE: ", rmse)

fig = plt.figure(figsize=(15,7))
plt.plot(X_test.index, Y_test, label='Observed', color='darkblue')
plt.plot(X_test.index, yhat, label='Predicted', color='c')
plt.legend(loc='upper right')



"""**Random Forest**"""

from sklearn.ensemble import RandomForestRegressor
forest_model = RandomForestRegressor(n_estimators=100, max_depth=10)
forest_model.fit(X_train,y_train)

y_rand = forest_model.predict(X_test)

# print ("The test score R2: ", forest_model.score(X_test, Y_test))

r2 = r2_score(Y_test, y_rand)
print ("The test score R2: ", r2)


error = mae(Y_test, y_rand)
print ("The test score MAE: ", error)


rmse = np.sqrt(mean_squared_error(Y_test, y_rand))
print ("The test score RMSE: ", rmse)

fig = plt.figure(figsize=(15,7))
plt.plot(X_test.index, Y_test, label='Observed', color='deeppink')
plt.plot(X_test.index, yhat, label='Predicted', color='lightpink')
plt.legend(loc='upper right')





